#!/bin/bash

#creates a github branch, tag and release based on input $VERSION from the command line
#usage example: create_github_release.sh <version>


#get the version from the command line
VERSION=$1

if [ -z "$VERSION" ]; then
  echo "No version specified"
  echo "Usage: create_github_release.sh <version>"
  echo "eg: ./create_github_reselase.sh 0.9.1"
  exit 1
fi

#validate that the version is in the correct format
if [[ ! "$VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
  echo "Version must be in the format x.x.x"
  echo "Example: 1.0.0"
  echo "Version provided: $VERSION"
  exit 1
fi

#Get the current branch
current_branch=$(git branch --show-current)

#check if there are uncommitted changes
if [ -n "$(git status --porcelain)" ]; then
  echo "There are uncommitted changes. Please commit or stash them before creating a release"
  exit 1
fi


echo "Creating a github release v$VERSION ..."

echo "Do you want to remove all local tags before fetching from remote? This should be done only if there are not local tags uncommitted (y/n)"
read -r remove_tags
if [ "$remove_tags" == "y" ]; then
    echo "Removing all local tags"
    git tag -l | xargs git tag -d
fi

echo "Fetching tags from remote"
git fetch --tags


#Checking if branch release/v$VERSION already exists"
if git rev-parse --verify "release/v$VERSION" >/dev/null 2>&1; then
  echo "Branch release/v$VERSION already exists"
  echo "Do you want to delete it? (y/n)"
  read -r delete_branch
  if [ "$delete_branch" == "y" ]; then
    echo "Deleting branch release/v$VERSION"
    git branch -D "release/v$VERSION"
  else
    echo "Aborting release creation"
    exit 1
  fi
fi

echo "Checking out release branch"
git checkout -b "release/v$VERSION"
echo "Committing release branch"
git push origin "release/v$VERSION"

#keep the last tag so that we can generate a changelog
last_tag=$(git describe --tags "$(git rev-list --tags --max-count=1)")
echo "Last tag: $last_tag"

echo "Generating changelog..."
changelog=$(git log --pretty=format:"- %s" "$last_tag..HEAD" | awk '!seen[$0]++')

#get the repo base url
repo_url=$(git config --get remote.origin.url)
#remove the .git extension
repo_url=${repo_url%.git}


#add a link to the full changelog
changelog="$changelog

  **Full Changelog**: $repo_url/compare/$last_tag...v$VERSION"

echo "The following changelog was generated:"
echo "$changelog"




echo "Do you want to use this changelog for the release? (you will be able to edit it)"
echo "If not, it will be auto generated by github with --generate-notes (y/n)"
read -r use_changelog

if [ "$use_changelog" == "y" ]; then
  #send the change log to a file and open it in the default editor
  echo "$changelog" > "$VERSION-changelog.md"
  nano "$VERSION-changelog.md"

  gh release create "v$VERSION" -t "v$VERSION" -F "$VERSION-changelog.md"

else
  echo "Creating release with auto generated changelog"
  gh release create "v$VERSION" -t "v$VERSION" --generate-notes
fi

#remove the changelog file
rm "$VERSION-changelog.md"

echo "switching back to the $current_branch branch"
git checkout "$current_branch"

echo "Release created successfully"
